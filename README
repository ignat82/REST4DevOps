An Atlassian Jira plugin created with Atlassian SDK.
Here are the SDK commands you'll use immediately (if you have the SDK installed):

* atlas-run   -- installs this plugin into the product and starts it on localhost
* atlas-debug -- same as atlas-run, but allows a debugger to attach at port 5005
* atlas-help  -- prints description for all commands in the SDK

Full SDK documentation is available at:
https://developer.atlassian.com/display/DOCS/Introduction+to+the+Atlassian+Plugin+SDK

***************************************************************************************

The only function of this plugin is to provide REST service for adding new option to jira custom
 field options list.

 API looks like:
    http://{host}/jira/rest/cfoptchange/1.0/options?field_id={field id }proj_id={project key}
        &new_opt={option to add}

the example is:
    http://localhost:2990/jira/rest/cfoptchange/1.0/options?field_id=customfield_10000
        &proj_id=TES&new_opt=new3

class src/main/hava/HCBplugins/rest/CfOptChange.java takes as GET parameters:

    - custom field id, that supposed to be of selected list type;
    - project key;
    - the option, the plugin should add to the custom field possible options list.

reaches Jira trough Jira Java API, acquires custom field context and adds new option value
to field's options list. afterwards class provides:

    - new options list of the field;
    - field name;
    - project name;
    - field configuration scheme name;
    - field configuration name.

to CfOptChangeModel.java class in same directory. The least class puts the initial GET
 parameters as well as acquired return parameters to XML response:

    <response customfieldId="customfield_10000" projectKey="TES">
        <fieldName>MultiSelectField</fieldName>
        <projectName>TestProject</projectName>
        <fieldConfigurationScheme>Default Configuration Scheme for MultiSelectField</fieldConfigurationScheme>
        <fieldConfiguration>Default Configuration for MultiSelectField</fieldConfiguration>
        <optionsString>{"base1", "base2", "new1", "new2", "new3"}</optionsString>
    </response>

There are implemented primitive checks for input validity, exceptions catching and errors information.

inherited from skeleton plugin tests in
    src\test\java\ut\HCBplugins\rest\CfOptChangeTest.java
are commented out, cause I haven't thought how to apply them to implemented logic.

nevertheless that's working MVP and opened to any suggestions for improving it

